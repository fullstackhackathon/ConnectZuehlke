/*
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.zuehlke.fullstack.ConnectZuehlke.apis.insight.dto.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ProjectPhase
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-03-21T13:18:19.970506+01:00[Europe/Zurich]")
public class ProjectPhase {

    @JsonProperty("Code")

    private String code = null;

    @JsonProperty("VertecId")

    private Long vertecId = null;

    @JsonProperty("Number")

    private String number = null;

    @JsonProperty("Name")

    private String name = null;

    @JsonProperty("FullName")

    private String fullName = null;

    @JsonProperty("Staffing")

    private Boolean staffing = null;

    @JsonProperty("StaffingRemarks")

    private String staffingRemarks = null;

    @JsonProperty("Nearshore")

    private Boolean nearshore = null;
    @JsonProperty("State")

    private StateEnum state = null;
    @JsonProperty("AdmPhase")

    private AdmPhaseEnum admPhase = null;
    @JsonProperty("DataQualityMessage")

    private String dataQualityMessage = null;
    @JsonProperty("StateText")

    private String stateText = null;
    @JsonProperty("StateAggregatedOrder")

    private String stateAggregatedOrder = null;
    @JsonProperty("StateTextAggregated")

    private String stateTextAggregated = null;
    @JsonProperty("Probability")

    private Double probability = null;
    @JsonProperty("Active")

    private Boolean active = null;
    @JsonProperty("PhaseNumber")

    private Integer phaseNumber = null;
    @JsonProperty("LostReason")

    private String lostReason = null;
    @JsonProperty("LostReasonDescription")

    private String lostReasonDescription = null;
    @JsonProperty("Contact")

    private Contact contact = null;
    @JsonProperty("CreatedDate")

    private OffsetDateTime createdDate = null;
    @JsonProperty("SoldDate")

    private OffsetDateTime soldDate = null;
    @JsonProperty("OfferDate")

    private OffsetDateTime offerDate = null;
    @JsonProperty("LostDate")

    private OffsetDateTime lostDate = null;
    @JsonProperty("From")

    private OffsetDateTime from = null;
    @JsonProperty("To")

    private OffsetDateTime to = null;
    @JsonProperty("EffectiveTurnover")

    private Double effectiveTurnover = null;
    @JsonProperty("Turnover")

    private Double turnover = null;
    @JsonProperty("EffectiveTurnoverPercentage")

    private Double effectiveTurnoverPercentage = null;
    @JsonProperty("TurnoverDifference")

    private Double turnoverDifference = null;
    @JsonProperty("TurnoverPerCustomer")

    private Double turnoverPerCustomer = null;
    @JsonProperty("PlannedHours")

    private Double plannedHours = null;
    @JsonProperty("Project")

    private Project project = null;
    @JsonProperty("SubPhases")

    private List<ProjectPhase> subPhases = null;
    @JsonProperty("Team")

    private List<ProjectParticipation> team = null;
    @JsonProperty("BudgetChanges")

    private List<BudgetChange> budgetChanges = null;
    @JsonProperty("Id")

    private Long id = null;

    public ProjectPhase code(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get code
     *
     * @return code
     **/
    @Schema(description = "")
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public ProjectPhase vertecId(Long vertecId) {
        this.vertecId = vertecId;
        return this;
    }

    /**
     * Get vertecId
     *
     * @return vertecId
     **/
    @Schema(description = "")
    public Long getVertecId() {
        return vertecId;
    }

    public void setVertecId(Long vertecId) {
        this.vertecId = vertecId;
    }

    /**
     * Get number
     *
     * @return number
     **/
    @Schema(description = "")
    public String getNumber() {
        return number;
    }

    public ProjectPhase name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @Schema(description = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get fullName
     *
     * @return fullName
     **/
    @Schema(description = "")
    public String getFullName() {
        return fullName;
    }

    public ProjectPhase staffing(Boolean staffing) {
        this.staffing = staffing;
        return this;
    }

    /**
     * Get staffing
     *
     * @return staffing
     **/
    @Schema(description = "")
    public Boolean isStaffing() {
        return staffing;
    }

    public void setStaffing(Boolean staffing) {
        this.staffing = staffing;
    }

    public ProjectPhase staffingRemarks(String staffingRemarks) {
        this.staffingRemarks = staffingRemarks;
        return this;
    }

    /**
     * Get staffingRemarks
     *
     * @return staffingRemarks
     **/
    @Schema(description = "")
    public String getStaffingRemarks() {
        return staffingRemarks;
    }

    public void setStaffingRemarks(String staffingRemarks) {
        this.staffingRemarks = staffingRemarks;
    }

    public ProjectPhase nearshore(Boolean nearshore) {
        this.nearshore = nearshore;
        return this;
    }

    /**
     * Get nearshore
     *
     * @return nearshore
     **/
    @Schema(description = "")
    public Boolean isNearshore() {
        return nearshore;
    }

    public void setNearshore(Boolean nearshore) {
        this.nearshore = nearshore;
    }

    public ProjectPhase state(StateEnum state) {
        this.state = state;
        return this;
    }

    /**
     * Get state
     *
     * @return state
     **/
    @Schema(description = "")
    public StateEnum getState() {
        return state;
    }

    public void setState(StateEnum state) {
        this.state = state;
    }

    public ProjectPhase admPhase(AdmPhaseEnum admPhase) {
        this.admPhase = admPhase;
        return this;
    }

    /**
     * Get admPhase
     *
     * @return admPhase
     **/
    @Schema(description = "")
    public AdmPhaseEnum getAdmPhase() {
        return admPhase;
    }

    public void setAdmPhase(AdmPhaseEnum admPhase) {
        this.admPhase = admPhase;
    }

    public ProjectPhase dataQualityMessage(String dataQualityMessage) {
        this.dataQualityMessage = dataQualityMessage;
        return this;
    }

    /**
     * Get dataQualityMessage
     *
     * @return dataQualityMessage
     **/
    @Schema(description = "")
    public String getDataQualityMessage() {
        return dataQualityMessage;
    }

    public void setDataQualityMessage(String dataQualityMessage) {
        this.dataQualityMessage = dataQualityMessage;
    }

    /**
     * Get stateText
     *
     * @return stateText
     **/
    @Schema(description = "")
    public String getStateText() {
        return stateText;
    }

    /**
     * Get stateAggregatedOrder
     *
     * @return stateAggregatedOrder
     **/
    @Schema(description = "")
    public String getStateAggregatedOrder() {
        return stateAggregatedOrder;
    }

    /**
     * Get stateTextAggregated
     *
     * @return stateTextAggregated
     **/
    @Schema(description = "")
    public String getStateTextAggregated() {
        return stateTextAggregated;
    }

    public ProjectPhase probability(Double probability) {
        this.probability = probability;
        return this;
    }

    /**
     * Get probability
     *
     * @return probability
     **/
    @Schema(description = "")
    public Double getProbability() {
        return probability;
    }

    public void setProbability(Double probability) {
        this.probability = probability;
    }

    public ProjectPhase active(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Get active
     *
     * @return active
     **/
    @Schema(description = "")
    public Boolean isActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public ProjectPhase phaseNumber(Integer phaseNumber) {
        this.phaseNumber = phaseNumber;
        return this;
    }

    /**
     * Get phaseNumber
     *
     * @return phaseNumber
     **/
    @Schema(description = "")
    public Integer getPhaseNumber() {
        return phaseNumber;
    }

    public void setPhaseNumber(Integer phaseNumber) {
        this.phaseNumber = phaseNumber;
    }

    public ProjectPhase lostReason(String lostReason) {
        this.lostReason = lostReason;
        return this;
    }

    /**
     * Get lostReason
     *
     * @return lostReason
     **/
    @Schema(description = "")
    public String getLostReason() {
        return lostReason;
    }

    public void setLostReason(String lostReason) {
        this.lostReason = lostReason;
    }

    public ProjectPhase lostReasonDescription(String lostReasonDescription) {
        this.lostReasonDescription = lostReasonDescription;
        return this;
    }

    /**
     * Get lostReasonDescription
     *
     * @return lostReasonDescription
     **/
    @Schema(description = "")
    public String getLostReasonDescription() {
        return lostReasonDescription;
    }

    public void setLostReasonDescription(String lostReasonDescription) {
        this.lostReasonDescription = lostReasonDescription;
    }

    public ProjectPhase contact(Contact contact) {
        this.contact = contact;
        return this;
    }

    /**
     * Get contact
     *
     * @return contact
     **/
    @Schema(description = "")
    public Contact getContact() {
        return contact;
    }

    public void setContact(Contact contact) {
        this.contact = contact;
    }

    public ProjectPhase createdDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }

    /**
     * Get createdDate
     *
     * @return createdDate
     **/
    @Schema(description = "")
    public OffsetDateTime getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
    }

    public ProjectPhase soldDate(OffsetDateTime soldDate) {
        this.soldDate = soldDate;
        return this;
    }

    /**
     * Get soldDate
     *
     * @return soldDate
     **/
    @Schema(description = "")
    public OffsetDateTime getSoldDate() {
        return soldDate;
    }

    public void setSoldDate(OffsetDateTime soldDate) {
        this.soldDate = soldDate;
    }

    public ProjectPhase offerDate(OffsetDateTime offerDate) {
        this.offerDate = offerDate;
        return this;
    }

    /**
     * Get offerDate
     *
     * @return offerDate
     **/
    @Schema(description = "")
    public OffsetDateTime getOfferDate() {
        return offerDate;
    }

    public void setOfferDate(OffsetDateTime offerDate) {
        this.offerDate = offerDate;
    }

    public ProjectPhase lostDate(OffsetDateTime lostDate) {
        this.lostDate = lostDate;
        return this;
    }

    /**
     * Get lostDate
     *
     * @return lostDate
     **/
    @Schema(description = "")
    public OffsetDateTime getLostDate() {
        return lostDate;
    }

    public void setLostDate(OffsetDateTime lostDate) {
        this.lostDate = lostDate;
    }

    public ProjectPhase from(OffsetDateTime from) {
        this.from = from;
        return this;
    }

    /**
     * Get from
     *
     * @return from
     **/
    @Schema(description = "")
    public OffsetDateTime getFrom() {
        return from;
    }

    public void setFrom(OffsetDateTime from) {
        this.from = from;
    }

    public ProjectPhase to(OffsetDateTime to) {
        this.to = to;
        return this;
    }

    /**
     * Get to
     *
     * @return to
     **/
    @Schema(description = "")
    public OffsetDateTime getTo() {
        return to;
    }

    public void setTo(OffsetDateTime to) {
        this.to = to;
    }

    public ProjectPhase effectiveTurnover(Double effectiveTurnover) {
        this.effectiveTurnover = effectiveTurnover;
        return this;
    }

    /**
     * Get effectiveTurnover
     *
     * @return effectiveTurnover
     **/
    @Schema(description = "")
    public Double getEffectiveTurnover() {
        return effectiveTurnover;
    }

    public void setEffectiveTurnover(Double effectiveTurnover) {
        this.effectiveTurnover = effectiveTurnover;
    }

    public ProjectPhase turnover(Double turnover) {
        this.turnover = turnover;
        return this;
    }

    /**
     * Get turnover
     *
     * @return turnover
     **/
    @Schema(description = "")
    public Double getTurnover() {
        return turnover;
    }

    public void setTurnover(Double turnover) {
        this.turnover = turnover;
    }

    /**
     * Get effectiveTurnoverPercentage
     *
     * @return effectiveTurnoverPercentage
     **/
    @Schema(description = "")
    public Double getEffectiveTurnoverPercentage() {
        return effectiveTurnoverPercentage;
    }

    /**
     * Get turnoverDifference
     *
     * @return turnoverDifference
     **/
    @Schema(description = "")
    public Double getTurnoverDifference() {
        return turnoverDifference;
    }

    public ProjectPhase turnoverPerCustomer(Double turnoverPerCustomer) {
        this.turnoverPerCustomer = turnoverPerCustomer;
        return this;
    }

    /**
     * Get turnoverPerCustomer
     *
     * @return turnoverPerCustomer
     **/
    @Schema(description = "")
    public Double getTurnoverPerCustomer() {
        return turnoverPerCustomer;
    }

    public void setTurnoverPerCustomer(Double turnoverPerCustomer) {
        this.turnoverPerCustomer = turnoverPerCustomer;
    }

    public ProjectPhase plannedHours(Double plannedHours) {
        this.plannedHours = plannedHours;
        return this;
    }

    /**
     * Get plannedHours
     *
     * @return plannedHours
     **/
    @Schema(description = "")
    public Double getPlannedHours() {
        return plannedHours;
    }

    public void setPlannedHours(Double plannedHours) {
        this.plannedHours = plannedHours;
    }

    public ProjectPhase project(Project project) {
        this.project = project;
        return this;
    }

    /**
     * Get project
     *
     * @return project
     **/
    @Schema(description = "")
    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public ProjectPhase subPhases(List<ProjectPhase> subPhases) {
        this.subPhases = subPhases;
        return this;
    }

    public ProjectPhase addSubPhasesItem(ProjectPhase subPhasesItem) {
        if (this.subPhases == null) {
            this.subPhases = new ArrayList<ProjectPhase>();
        }
        this.subPhases.add(subPhasesItem);
        return this;
    }

    /**
     * Get subPhases
     *
     * @return subPhases
     **/
    @Schema(description = "")
    public List<ProjectPhase> getSubPhases() {
        return subPhases;
    }

    public void setSubPhases(List<ProjectPhase> subPhases) {
        this.subPhases = subPhases;
    }

    public ProjectPhase team(List<ProjectParticipation> team) {
        this.team = team;
        return this;
    }

    public ProjectPhase addTeamItem(ProjectParticipation teamItem) {
        if (this.team == null) {
            this.team = new ArrayList<ProjectParticipation>();
        }
        this.team.add(teamItem);
        return this;
    }

    /**
     * Get team
     *
     * @return team
     **/
    @Schema(description = "")
    public List<ProjectParticipation> getTeam() {
        return team;
    }

    public void setTeam(List<ProjectParticipation> team) {
        this.team = team;
    }

    public ProjectPhase budgetChanges(List<BudgetChange> budgetChanges) {
        this.budgetChanges = budgetChanges;
        return this;
    }

    public ProjectPhase addBudgetChangesItem(BudgetChange budgetChangesItem) {
        if (this.budgetChanges == null) {
            this.budgetChanges = new ArrayList<BudgetChange>();
        }
        this.budgetChanges.add(budgetChangesItem);
        return this;
    }

    /**
     * Get budgetChanges
     *
     * @return budgetChanges
     **/
    @Schema(description = "")
    public List<BudgetChange> getBudgetChanges() {
        return budgetChanges;
    }

    public void setBudgetChanges(List<BudgetChange> budgetChanges) {
        this.budgetChanges = budgetChanges;
    }

    public ProjectPhase id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProjectPhase projectPhase = (ProjectPhase) o;
        return Objects.equals(this.code, projectPhase.code) &&
                Objects.equals(this.vertecId, projectPhase.vertecId) &&
                Objects.equals(this.number, projectPhase.number) &&
                Objects.equals(this.name, projectPhase.name) &&
                Objects.equals(this.fullName, projectPhase.fullName) &&
                Objects.equals(this.staffing, projectPhase.staffing) &&
                Objects.equals(this.staffingRemarks, projectPhase.staffingRemarks) &&
                Objects.equals(this.nearshore, projectPhase.nearshore) &&
                Objects.equals(this.state, projectPhase.state) &&
                Objects.equals(this.admPhase, projectPhase.admPhase) &&
                Objects.equals(this.dataQualityMessage, projectPhase.dataQualityMessage) &&
                Objects.equals(this.stateText, projectPhase.stateText) &&
                Objects.equals(this.stateAggregatedOrder, projectPhase.stateAggregatedOrder) &&
                Objects.equals(this.stateTextAggregated, projectPhase.stateTextAggregated) &&
                Objects.equals(this.probability, projectPhase.probability) &&
                Objects.equals(this.active, projectPhase.active) &&
                Objects.equals(this.phaseNumber, projectPhase.phaseNumber) &&
                Objects.equals(this.lostReason, projectPhase.lostReason) &&
                Objects.equals(this.lostReasonDescription, projectPhase.lostReasonDescription) &&
                Objects.equals(this.contact, projectPhase.contact) &&
                Objects.equals(this.createdDate, projectPhase.createdDate) &&
                Objects.equals(this.soldDate, projectPhase.soldDate) &&
                Objects.equals(this.offerDate, projectPhase.offerDate) &&
                Objects.equals(this.lostDate, projectPhase.lostDate) &&
                Objects.equals(this.from, projectPhase.from) &&
                Objects.equals(this.to, projectPhase.to) &&
                Objects.equals(this.effectiveTurnover, projectPhase.effectiveTurnover) &&
                Objects.equals(this.turnover, projectPhase.turnover) &&
                Objects.equals(this.effectiveTurnoverPercentage, projectPhase.effectiveTurnoverPercentage) &&
                Objects.equals(this.turnoverDifference, projectPhase.turnoverDifference) &&
                Objects.equals(this.turnoverPerCustomer, projectPhase.turnoverPerCustomer) &&
                Objects.equals(this.plannedHours, projectPhase.plannedHours) &&
                Objects.equals(this.project, projectPhase.project) &&
                Objects.equals(this.subPhases, projectPhase.subPhases) &&
                Objects.equals(this.team, projectPhase.team) &&
                Objects.equals(this.budgetChanges, projectPhase.budgetChanges) &&
                Objects.equals(this.id, projectPhase.id);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(code, vertecId, number, name, fullName, staffing, staffingRemarks, nearshore, state, admPhase, dataQualityMessage, stateText, stateAggregatedOrder, stateTextAggregated, probability, active, phaseNumber, lostReason, lostReasonDescription, contact, createdDate, soldDate, offerDate, lostDate, from, to, effectiveTurnover, turnover, effectiveTurnoverPercentage, turnoverDifference, turnoverPerCustomer, plannedHours, project, subPhases, team, budgetChanges, id);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ProjectPhase {\n");

        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    vertecId: ").append(toIndentedString(vertecId)).append("\n");
        sb.append("    number: ").append(toIndentedString(number)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
        sb.append("    staffing: ").append(toIndentedString(staffing)).append("\n");
        sb.append("    staffingRemarks: ").append(toIndentedString(staffingRemarks)).append("\n");
        sb.append("    nearshore: ").append(toIndentedString(nearshore)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    admPhase: ").append(toIndentedString(admPhase)).append("\n");
        sb.append("    dataQualityMessage: ").append(toIndentedString(dataQualityMessage)).append("\n");
        sb.append("    stateText: ").append(toIndentedString(stateText)).append("\n");
        sb.append("    stateAggregatedOrder: ").append(toIndentedString(stateAggregatedOrder)).append("\n");
        sb.append("    stateTextAggregated: ").append(toIndentedString(stateTextAggregated)).append("\n");
        sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
        sb.append("    active: ").append(toIndentedString(active)).append("\n");
        sb.append("    phaseNumber: ").append(toIndentedString(phaseNumber)).append("\n");
        sb.append("    lostReason: ").append(toIndentedString(lostReason)).append("\n");
        sb.append("    lostReasonDescription: ").append(toIndentedString(lostReasonDescription)).append("\n");
        sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
        sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
        sb.append("    soldDate: ").append(toIndentedString(soldDate)).append("\n");
        sb.append("    offerDate: ").append(toIndentedString(offerDate)).append("\n");
        sb.append("    lostDate: ").append(toIndentedString(lostDate)).append("\n");
        sb.append("    from: ").append(toIndentedString(from)).append("\n");
        sb.append("    to: ").append(toIndentedString(to)).append("\n");
        sb.append("    effectiveTurnover: ").append(toIndentedString(effectiveTurnover)).append("\n");
        sb.append("    turnover: ").append(toIndentedString(turnover)).append("\n");
        sb.append("    effectiveTurnoverPercentage: ").append(toIndentedString(effectiveTurnoverPercentage)).append("\n");
        sb.append("    turnoverDifference: ").append(toIndentedString(turnoverDifference)).append("\n");
        sb.append("    turnoverPerCustomer: ").append(toIndentedString(turnoverPerCustomer)).append("\n");
        sb.append("    plannedHours: ").append(toIndentedString(plannedHours)).append("\n");
        sb.append("    project: ").append(toIndentedString(project)).append("\n");
        sb.append("    subPhases: ").append(toIndentedString(subPhases)).append("\n");
        sb.append("    team: ").append(toIndentedString(team)).append("\n");
        sb.append("    budgetChanges: ").append(toIndentedString(budgetChanges)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets state
     */
    public enum StateEnum {
        NUMBER_5(5),
        NUMBER_10(10),
        NUMBER_11(11),
        NUMBER_12(12),
        NUMBER_20(20),
        NUMBER_21(21),
        NUMBER_30(30),
        NUMBER_40(40),
        NUMBER_99(99);

        private Integer value;

        StateEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static StateEnum fromValue(String text) {
            for (StateEnum b : StateEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

    /**
     * Gets or Sets admPhase
     */
    public enum AdmPhaseEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2),
        NUMBER_4(4),
        NUMBER_8(8),
        NUMBER_16(16);

        private Integer value;

        AdmPhaseEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static AdmPhaseEnum fromValue(String text) {
            for (AdmPhaseEnum b : AdmPhaseEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

}
