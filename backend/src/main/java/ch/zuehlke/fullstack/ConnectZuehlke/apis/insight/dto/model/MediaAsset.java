/*
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.zuehlke.fullstack.ConnectZuehlke.apis.insight.dto.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * MediaAsset
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-03-21T13:18:19.970506+01:00[Europe/Zurich]")
public class MediaAsset {

    @JsonProperty("Id")

    private Long id = null;

    @JsonProperty("Name")

    private String name = null;

    @JsonProperty("TextData")

    private String textData = null;

    @JsonProperty("Url")

    private String url = null;

    @JsonProperty("CanEdit")

    private Boolean canEdit = null;

    @JsonProperty("CanDelete")

    private Boolean canDelete = null;

    @JsonProperty("Thumb")

    private String thumb = null;

    @JsonProperty("ThumbUrl")

    private String thumbUrl = null;
    @JsonProperty("Language")

    private LanguageEnum language = null;
    @JsonProperty("Type")

    private TypeEnum type = null;
    @JsonProperty("Color")

    private ColorEnum color = null;
    @JsonProperty("TypeText")

    private String typeText = null;
    @JsonProperty("Creator")

    private Employee creator = null;
    @JsonProperty("CreatedDate")

    private OffsetDateTime createdDate = null;
    @JsonProperty("Tags")

    private List<MediaAssetTag> tags = null;
    @JsonProperty("UpVotes")

    private Integer upVotes = null;
    @JsonProperty("DownVotes")

    private Integer downVotes = null;
    @JsonProperty("License")

    private LicenseEnum license = null;
    @JsonProperty("ContentType")

    private ContentTypeEnum contentType = null;
    @JsonProperty("ContentTypeText")

    private String contentTypeText = null;
    @JsonProperty("LicenseDescription")

    private String licenseDescription = null;
    @JsonProperty("DownloadCount")

    private Long downloadCount = null;
    @JsonProperty("Popularity")

    private Long popularity = null;
    @JsonProperty("Ranking")

    private Integer ranking = null;
    @JsonProperty("LicenseText")

    private String licenseText = null;
    @JsonProperty("Width")

    private Integer width = null;
    @JsonProperty("Height")

    private Integer height = null;
    @JsonProperty("Size")

    private Integer size = null;
    @JsonProperty("Resolution")

    private Integer resolution = null;
    @JsonProperty("Source")

    private String source = null;
    @JsonProperty("DimensionText")

    private String dimensionText = null;

    public MediaAsset id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public MediaAsset name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @Schema(description = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public MediaAsset textData(String textData) {
        this.textData = textData;
        return this;
    }

    /**
     * Get textData
     *
     * @return textData
     **/
    @Schema(description = "")
    public String getTextData() {
        return textData;
    }

    public void setTextData(String textData) {
        this.textData = textData;
    }

    public MediaAsset url(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get url
     *
     * @return url
     **/
    @Schema(description = "")
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public MediaAsset canEdit(Boolean canEdit) {
        this.canEdit = canEdit;
        return this;
    }

    /**
     * Get canEdit
     *
     * @return canEdit
     **/
    @Schema(description = "")
    public Boolean isCanEdit() {
        return canEdit;
    }

    public void setCanEdit(Boolean canEdit) {
        this.canEdit = canEdit;
    }

    public MediaAsset canDelete(Boolean canDelete) {
        this.canDelete = canDelete;
        return this;
    }

    /**
     * Get canDelete
     *
     * @return canDelete
     **/
    @Schema(description = "")
    public Boolean isCanDelete() {
        return canDelete;
    }

    public void setCanDelete(Boolean canDelete) {
        this.canDelete = canDelete;
    }

    public MediaAsset thumb(String thumb) {
        this.thumb = thumb;
        return this;
    }

    /**
     * Get thumb
     *
     * @return thumb
     **/
    @Schema(description = "")
    public String getThumb() {
        return thumb;
    }

    public void setThumb(String thumb) {
        this.thumb = thumb;
    }

    /**
     * Get thumbUrl
     *
     * @return thumbUrl
     **/
    @Schema(description = "")
    public String getThumbUrl() {
        return thumbUrl;
    }

    public MediaAsset language(LanguageEnum language) {
        this.language = language;
        return this;
    }

    /**
     * Get language
     *
     * @return language
     **/
    @Schema(description = "")
    public LanguageEnum getLanguage() {
        return language;
    }

    public void setLanguage(LanguageEnum language) {
        this.language = language;
    }

    public MediaAsset type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     **/
    @Schema(description = "")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public MediaAsset color(ColorEnum color) {
        this.color = color;
        return this;
    }

    /**
     * Get color
     *
     * @return color
     **/
    @Schema(description = "")
    public ColorEnum getColor() {
        return color;
    }

    public void setColor(ColorEnum color) {
        this.color = color;
    }

    /**
     * Get typeText
     *
     * @return typeText
     **/
    @Schema(description = "")
    public String getTypeText() {
        return typeText;
    }

    public MediaAsset creator(Employee creator) {
        this.creator = creator;
        return this;
    }

    /**
     * Get creator
     *
     * @return creator
     **/
    @Schema(description = "")
    public Employee getCreator() {
        return creator;
    }

    public void setCreator(Employee creator) {
        this.creator = creator;
    }

    public MediaAsset createdDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }

    /**
     * Get createdDate
     *
     * @return createdDate
     **/
    @Schema(description = "")
    public OffsetDateTime getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
    }

    public MediaAsset tags(List<MediaAssetTag> tags) {
        this.tags = tags;
        return this;
    }

    public MediaAsset addTagsItem(MediaAssetTag tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<MediaAssetTag>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * Get tags
     *
     * @return tags
     **/
    @Schema(description = "")
    public List<MediaAssetTag> getTags() {
        return tags;
    }

    public void setTags(List<MediaAssetTag> tags) {
        this.tags = tags;
    }

    public MediaAsset upVotes(Integer upVotes) {
        this.upVotes = upVotes;
        return this;
    }

    /**
     * Get upVotes
     *
     * @return upVotes
     **/
    @Schema(description = "")
    public Integer getUpVotes() {
        return upVotes;
    }

    public void setUpVotes(Integer upVotes) {
        this.upVotes = upVotes;
    }

    public MediaAsset downVotes(Integer downVotes) {
        this.downVotes = downVotes;
        return this;
    }

    /**
     * Get downVotes
     *
     * @return downVotes
     **/
    @Schema(description = "")
    public Integer getDownVotes() {
        return downVotes;
    }

    public void setDownVotes(Integer downVotes) {
        this.downVotes = downVotes;
    }

    public MediaAsset license(LicenseEnum license) {
        this.license = license;
        return this;
    }

    /**
     * Get license
     *
     * @return license
     **/
    @Schema(description = "")
    public LicenseEnum getLicense() {
        return license;
    }

    public void setLicense(LicenseEnum license) {
        this.license = license;
    }

    public MediaAsset contentType(ContentTypeEnum contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get contentType
     *
     * @return contentType
     **/
    @Schema(description = "")
    public ContentTypeEnum getContentType() {
        return contentType;
    }

    public void setContentType(ContentTypeEnum contentType) {
        this.contentType = contentType;
    }

    /**
     * Get contentTypeText
     *
     * @return contentTypeText
     **/
    @Schema(description = "")
    public String getContentTypeText() {
        return contentTypeText;
    }

    public MediaAsset licenseDescription(String licenseDescription) {
        this.licenseDescription = licenseDescription;
        return this;
    }

    /**
     * Get licenseDescription
     *
     * @return licenseDescription
     **/
    @Schema(description = "")
    public String getLicenseDescription() {
        return licenseDescription;
    }

    public void setLicenseDescription(String licenseDescription) {
        this.licenseDescription = licenseDescription;
    }

    public MediaAsset downloadCount(Long downloadCount) {
        this.downloadCount = downloadCount;
        return this;
    }

    /**
     * Get downloadCount
     *
     * @return downloadCount
     **/
    @Schema(description = "")
    public Long getDownloadCount() {
        return downloadCount;
    }

    public void setDownloadCount(Long downloadCount) {
        this.downloadCount = downloadCount;
    }

    /**
     * Get popularity
     *
     * @return popularity
     **/
    @Schema(description = "")
    public Long getPopularity() {
        return popularity;
    }

    public MediaAsset ranking(Integer ranking) {
        this.ranking = ranking;
        return this;
    }

    /**
     * Get ranking
     *
     * @return ranking
     **/
    @Schema(description = "")
    public Integer getRanking() {
        return ranking;
    }

    public void setRanking(Integer ranking) {
        this.ranking = ranking;
    }

    /**
     * Get licenseText
     *
     * @return licenseText
     **/
    @Schema(description = "")
    public String getLicenseText() {
        return licenseText;
    }

    public MediaAsset width(Integer width) {
        this.width = width;
        return this;
    }

    /**
     * Get width
     *
     * @return width
     **/
    @Schema(description = "")
    public Integer getWidth() {
        return width;
    }

    public void setWidth(Integer width) {
        this.width = width;
    }

    public MediaAsset height(Integer height) {
        this.height = height;
        return this;
    }

    /**
     * Get height
     *
     * @return height
     **/
    @Schema(description = "")
    public Integer getHeight() {
        return height;
    }

    public void setHeight(Integer height) {
        this.height = height;
    }

    public MediaAsset size(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * Get size
     *
     * @return size
     **/
    @Schema(description = "")
    public Integer getSize() {
        return size;
    }

    public void setSize(Integer size) {
        this.size = size;
    }

    public MediaAsset resolution(Integer resolution) {
        this.resolution = resolution;
        return this;
    }

    /**
     * Get resolution
     *
     * @return resolution
     **/
    @Schema(description = "")
    public Integer getResolution() {
        return resolution;
    }

    public void setResolution(Integer resolution) {
        this.resolution = resolution;
    }

    public MediaAsset source(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get source
     *
     * @return source
     **/
    @Schema(description = "")
    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    /**
     * Get dimensionText
     *
     * @return dimensionText
     **/
    @Schema(description = "")
    public String getDimensionText() {
        return dimensionText;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MediaAsset mediaAsset = (MediaAsset) o;
        return Objects.equals(this.id, mediaAsset.id) &&
                Objects.equals(this.name, mediaAsset.name) &&
                Objects.equals(this.textData, mediaAsset.textData) &&
                Objects.equals(this.url, mediaAsset.url) &&
                Objects.equals(this.canEdit, mediaAsset.canEdit) &&
                Objects.equals(this.canDelete, mediaAsset.canDelete) &&
                Objects.equals(this.thumb, mediaAsset.thumb) &&
                Objects.equals(this.thumbUrl, mediaAsset.thumbUrl) &&
                Objects.equals(this.language, mediaAsset.language) &&
                Objects.equals(this.type, mediaAsset.type) &&
                Objects.equals(this.color, mediaAsset.color) &&
                Objects.equals(this.typeText, mediaAsset.typeText) &&
                Objects.equals(this.creator, mediaAsset.creator) &&
                Objects.equals(this.createdDate, mediaAsset.createdDate) &&
                Objects.equals(this.tags, mediaAsset.tags) &&
                Objects.equals(this.upVotes, mediaAsset.upVotes) &&
                Objects.equals(this.downVotes, mediaAsset.downVotes) &&
                Objects.equals(this.license, mediaAsset.license) &&
                Objects.equals(this.contentType, mediaAsset.contentType) &&
                Objects.equals(this.contentTypeText, mediaAsset.contentTypeText) &&
                Objects.equals(this.licenseDescription, mediaAsset.licenseDescription) &&
                Objects.equals(this.downloadCount, mediaAsset.downloadCount) &&
                Objects.equals(this.popularity, mediaAsset.popularity) &&
                Objects.equals(this.ranking, mediaAsset.ranking) &&
                Objects.equals(this.licenseText, mediaAsset.licenseText) &&
                Objects.equals(this.width, mediaAsset.width) &&
                Objects.equals(this.height, mediaAsset.height) &&
                Objects.equals(this.size, mediaAsset.size) &&
                Objects.equals(this.resolution, mediaAsset.resolution) &&
                Objects.equals(this.source, mediaAsset.source) &&
                Objects.equals(this.dimensionText, mediaAsset.dimensionText);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(id, name, textData, url, canEdit, canDelete, thumb, thumbUrl, language, type, color, typeText, creator, createdDate, tags, upVotes, downVotes, license, contentType, contentTypeText, licenseDescription, downloadCount, popularity, ranking, licenseText, width, height, size, resolution, source, dimensionText);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MediaAsset {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    textData: ").append(toIndentedString(textData)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
        sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
        sb.append("    thumb: ").append(toIndentedString(thumb)).append("\n");
        sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
        sb.append("    language: ").append(toIndentedString(language)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    color: ").append(toIndentedString(color)).append("\n");
        sb.append("    typeText: ").append(toIndentedString(typeText)).append("\n");
        sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
        sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    upVotes: ").append(toIndentedString(upVotes)).append("\n");
        sb.append("    downVotes: ").append(toIndentedString(downVotes)).append("\n");
        sb.append("    license: ").append(toIndentedString(license)).append("\n");
        sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
        sb.append("    contentTypeText: ").append(toIndentedString(contentTypeText)).append("\n");
        sb.append("    licenseDescription: ").append(toIndentedString(licenseDescription)).append("\n");
        sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
        sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
        sb.append("    ranking: ").append(toIndentedString(ranking)).append("\n");
        sb.append("    licenseText: ").append(toIndentedString(licenseText)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    dimensionText: ").append(toIndentedString(dimensionText)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets language
     */
    public enum LanguageEnum {
        NUMBER_0(0),
        NUMBER_1(1);

        private Integer value;

        LanguageEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static LanguageEnum fromValue(String text) {
            for (LanguageEnum b : LanguageEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

    /**
     * Gets or Sets type
     */
    public enum TypeEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2),
        NUMBER_3(3),
        NUMBER_4(4),
        NUMBER_5(5);

        private Integer value;

        TypeEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static TypeEnum fromValue(String text) {
            for (TypeEnum b : TypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

    /**
     * Gets or Sets color
     */
    public enum ColorEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2),
        NUMBER_4(4),
        NUMBER_8(8),
        NUMBER_16(16),
        NUMBER_32(32),
        NUMBER_64(64),
        NUMBER_128(128),
        NUMBER_256(256);

        private Integer value;

        ColorEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static ColorEnum fromValue(String text) {
            for (ColorEnum b : ColorEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

    /**
     * Gets or Sets license
     */
    public enum LicenseEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2);

        private Integer value;

        LicenseEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static LicenseEnum fromValue(String text) {
            for (LicenseEnum b : LicenseEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

    /**
     * Gets or Sets contentType
     */
    public enum ContentTypeEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2),
        NUMBER_3(3),
        NUMBER_4(4),
        NUMBER_5(5),
        NUMBER_6(6),
        NUMBER_8(8),
        NUMBER_9(9),
        NUMBER_12(12),
        NUMBER_15(15);

        private Integer value;

        ContentTypeEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static ContentTypeEnum fromValue(String text) {
            for (ContentTypeEnum b : ContentTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

}
