/*
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.zuehlke.insight.client.model;

import java.util.Objects;

import ch.zuehlke.insight.client.model.Capability;
import ch.zuehlke.insight.client.model.SkillCategory;
import ch.zuehlke.insight.client.model.SkillProof;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;

import org.threeten.bp.OffsetDateTime;

/**
 * EmployeeSkill
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-03-21T13:18:19.970506+01:00[Europe/Zurich]")
public class EmployeeSkill {

    @JsonProperty("Id")

    private Long id = null;

    @JsonProperty("Name")

    private String name = null;

    @JsonProperty("ShortDescription")

    private String shortDescription = null;

    @JsonProperty("Description")

    private String description = null;

    @JsonProperty("LastProof")

    private OffsetDateTime lastProof = null;

    @JsonProperty("Category")

    private SkillCategory category = null;
    @JsonProperty("Experience")

    private ExperienceEnum experience = null;
    @JsonProperty("ExperienceText")

    private String experienceText = null;
    @JsonProperty("ExperiencePoints")

    private Double experiencePoints = null;
    @JsonProperty("Sources")

    private List<SkillProof> sources = null;
    @JsonProperty("Capability")

    private Capability capability = null;
    @JsonProperty("IsManagedSkill")

    private Boolean isManagedSkill = null;
    @JsonProperty("IsDisabled")

    private Boolean isDisabled = null;

    public EmployeeSkill id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public EmployeeSkill name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     **/
    @Schema(description = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public EmployeeSkill shortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
        return this;
    }

    /**
     * Get shortDescription
     *
     * @return shortDescription
     **/
    @Schema(description = "")
    public String getShortDescription() {
        return shortDescription;
    }

    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    public EmployeeSkill description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     **/
    @Schema(description = "")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public EmployeeSkill lastProof(OffsetDateTime lastProof) {
        this.lastProof = lastProof;
        return this;
    }

    /**
     * Get lastProof
     *
     * @return lastProof
     **/
    @Schema(description = "")
    public OffsetDateTime getLastProof() {
        return lastProof;
    }

    public void setLastProof(OffsetDateTime lastProof) {
        this.lastProof = lastProof;
    }

    public EmployeeSkill category(SkillCategory category) {
        this.category = category;
        return this;
    }

    /**
     * Get category
     *
     * @return category
     **/
    @Schema(description = "")
    public SkillCategory getCategory() {
        return category;
    }

    public void setCategory(SkillCategory category) {
        this.category = category;
    }

    public EmployeeSkill experience(ExperienceEnum experience) {
        this.experience = experience;
        return this;
    }

    /**
     * Get experience
     *
     * @return experience
     **/
    @Schema(description = "")
    public ExperienceEnum getExperience() {
        return experience;
    }

    public void setExperience(ExperienceEnum experience) {
        this.experience = experience;
    }

    /**
     * Get experienceText
     *
     * @return experienceText
     **/
    @Schema(description = "")
    public String getExperienceText() {
        return experienceText;
    }

    /**
     * Get experiencePoints
     *
     * @return experiencePoints
     **/
    @Schema(description = "")
    public Double getExperiencePoints() {
        return experiencePoints;
    }

    public EmployeeSkill sources(List<SkillProof> sources) {
        this.sources = sources;
        return this;
    }

    public EmployeeSkill addSourcesItem(SkillProof sourcesItem) {
        if (this.sources == null) {
            this.sources = new ArrayList<SkillProof>();
        }
        this.sources.add(sourcesItem);
        return this;
    }

    /**
     * Get sources
     *
     * @return sources
     **/
    @Schema(description = "")
    public List<SkillProof> getSources() {
        return sources;
    }

    public void setSources(List<SkillProof> sources) {
        this.sources = sources;
    }

    public EmployeeSkill capability(Capability capability) {
        this.capability = capability;
        return this;
    }

    /**
     * Get capability
     *
     * @return capability
     **/
    @Schema(description = "")
    public Capability getCapability() {
        return capability;
    }

    public void setCapability(Capability capability) {
        this.capability = capability;
    }

    /**
     * Get isManagedSkill
     *
     * @return isManagedSkill
     **/
    @Schema(description = "")
    public Boolean isIsManagedSkill() {
        return isManagedSkill;
    }

    public EmployeeSkill isDisabled(Boolean isDisabled) {
        this.isDisabled = isDisabled;
        return this;
    }

    /**
     * Get isDisabled
     *
     * @return isDisabled
     **/
    @Schema(description = "")
    public Boolean isIsDisabled() {
        return isDisabled;
    }

    public void setIsDisabled(Boolean isDisabled) {
        this.isDisabled = isDisabled;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeSkill employeeSkill = (EmployeeSkill) o;
        return Objects.equals(this.id, employeeSkill.id) &&
                Objects.equals(this.name, employeeSkill.name) &&
                Objects.equals(this.shortDescription, employeeSkill.shortDescription) &&
                Objects.equals(this.description, employeeSkill.description) &&
                Objects.equals(this.lastProof, employeeSkill.lastProof) &&
                Objects.equals(this.category, employeeSkill.category) &&
                Objects.equals(this.experience, employeeSkill.experience) &&
                Objects.equals(this.experienceText, employeeSkill.experienceText) &&
                Objects.equals(this.experiencePoints, employeeSkill.experiencePoints) &&
                Objects.equals(this.sources, employeeSkill.sources) &&
                Objects.equals(this.capability, employeeSkill.capability) &&
                Objects.equals(this.isManagedSkill, employeeSkill.isManagedSkill) &&
                Objects.equals(this.isDisabled, employeeSkill.isDisabled);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(id, name, shortDescription, description, lastProof, category, experience, experienceText, experiencePoints, sources, capability, isManagedSkill, isDisabled);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmployeeSkill {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    lastProof: ").append(toIndentedString(lastProof)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
        sb.append("    experienceText: ").append(toIndentedString(experienceText)).append("\n");
        sb.append("    experiencePoints: ").append(toIndentedString(experiencePoints)).append("\n");
        sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
        sb.append("    capability: ").append(toIndentedString(capability)).append("\n");
        sb.append("    isManagedSkill: ").append(toIndentedString(isManagedSkill)).append("\n");
        sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets experience
     */
    public enum ExperienceEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2),
        NUMBER_4(4),
        NUMBER_5(5),
        NUMBER_6(6);

        private Integer value;

        ExperienceEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static ExperienceEnum fromValue(String text) {
            for (ExperienceEnum b : ExperienceEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

}
