/*
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.zuehlke.fullstack.ConnectZuehlke.apis.insight.dto.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;

/**
 * SkillDevelopmentGoal
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-03-21T13:18:19.970506+01:00[Europe/Zurich]")
public class SkillDevelopmentGoal {

    @JsonProperty("Skill")

    private Skill skill = null;

    @JsonProperty("Employee")

    private Employee employee = null;

    @JsonProperty("NoInvestment")

    private Boolean noInvestment = null;

    @JsonProperty("NoInvestmentReason")

    private String noInvestmentReason = null;

    @JsonProperty("Completed")

    private Boolean completed = null;
    @JsonProperty("TargetExperienceLevel")

    private TargetExperienceLevelEnum targetExperienceLevel = null;
    @JsonProperty("TargetExperienceLevelText")

    private String targetExperienceLevelText = null;
    @JsonProperty("Actions")

    private String actions = null;
    @JsonProperty("TrainingDays")

    private Double trainingDays = null;
    @JsonProperty("ProjectDays")

    private Double projectDays = null;
    @JsonProperty("Amount")

    private Double amount = null;
    @JsonProperty("Until")

    private OffsetDateTime until = null;
    @JsonProperty("Id")

    private Long id = null;

    public SkillDevelopmentGoal skill(Skill skill) {
        this.skill = skill;
        return this;
    }

    /**
     * Get skill
     *
     * @return skill
     **/
    @Schema(description = "")
    public Skill getSkill() {
        return skill;
    }

    public void setSkill(Skill skill) {
        this.skill = skill;
    }

    public SkillDevelopmentGoal employee(Employee employee) {
        this.employee = employee;
        return this;
    }

    /**
     * Get employee
     *
     * @return employee
     **/
    @Schema(description = "")
    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public SkillDevelopmentGoal noInvestment(Boolean noInvestment) {
        this.noInvestment = noInvestment;
        return this;
    }

    /**
     * Get noInvestment
     *
     * @return noInvestment
     **/
    @Schema(description = "")
    public Boolean isNoInvestment() {
        return noInvestment;
    }

    public void setNoInvestment(Boolean noInvestment) {
        this.noInvestment = noInvestment;
    }

    public SkillDevelopmentGoal noInvestmentReason(String noInvestmentReason) {
        this.noInvestmentReason = noInvestmentReason;
        return this;
    }

    /**
     * Get noInvestmentReason
     *
     * @return noInvestmentReason
     **/
    @Schema(description = "")
    public String getNoInvestmentReason() {
        return noInvestmentReason;
    }

    public void setNoInvestmentReason(String noInvestmentReason) {
        this.noInvestmentReason = noInvestmentReason;
    }

    public SkillDevelopmentGoal completed(Boolean completed) {
        this.completed = completed;
        return this;
    }

    /**
     * Get completed
     *
     * @return completed
     **/
    @Schema(description = "")
    public Boolean isCompleted() {
        return completed;
    }

    public void setCompleted(Boolean completed) {
        this.completed = completed;
    }

    public SkillDevelopmentGoal targetExperienceLevel(TargetExperienceLevelEnum targetExperienceLevel) {
        this.targetExperienceLevel = targetExperienceLevel;
        return this;
    }

    /**
     * Get targetExperienceLevel
     *
     * @return targetExperienceLevel
     **/
    @Schema(description = "")
    public TargetExperienceLevelEnum getTargetExperienceLevel() {
        return targetExperienceLevel;
    }

    public void setTargetExperienceLevel(TargetExperienceLevelEnum targetExperienceLevel) {
        this.targetExperienceLevel = targetExperienceLevel;
    }

    /**
     * Get targetExperienceLevelText
     *
     * @return targetExperienceLevelText
     **/
    @Schema(description = "")
    public String getTargetExperienceLevelText() {
        return targetExperienceLevelText;
    }

    public SkillDevelopmentGoal actions(String actions) {
        this.actions = actions;
        return this;
    }

    /**
     * Get actions
     *
     * @return actions
     **/
    @Schema(description = "")
    public String getActions() {
        return actions;
    }

    public void setActions(String actions) {
        this.actions = actions;
    }

    public SkillDevelopmentGoal trainingDays(Double trainingDays) {
        this.trainingDays = trainingDays;
        return this;
    }

    /**
     * Get trainingDays
     *
     * @return trainingDays
     **/
    @Schema(description = "")
    public Double getTrainingDays() {
        return trainingDays;
    }

    public void setTrainingDays(Double trainingDays) {
        this.trainingDays = trainingDays;
    }

    public SkillDevelopmentGoal projectDays(Double projectDays) {
        this.projectDays = projectDays;
        return this;
    }

    /**
     * Get projectDays
     *
     * @return projectDays
     **/
    @Schema(description = "")
    public Double getProjectDays() {
        return projectDays;
    }

    public void setProjectDays(Double projectDays) {
        this.projectDays = projectDays;
    }

    public SkillDevelopmentGoal amount(Double amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     **/
    @Schema(description = "")
    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public SkillDevelopmentGoal until(OffsetDateTime until) {
        this.until = until;
        return this;
    }

    /**
     * Get until
     *
     * @return until
     **/
    @Schema(description = "")
    public OffsetDateTime getUntil() {
        return until;
    }

    public void setUntil(OffsetDateTime until) {
        this.until = until;
    }

    public SkillDevelopmentGoal id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @Schema(description = "")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SkillDevelopmentGoal skillDevelopmentGoal = (SkillDevelopmentGoal) o;
        return Objects.equals(this.skill, skillDevelopmentGoal.skill) &&
                Objects.equals(this.employee, skillDevelopmentGoal.employee) &&
                Objects.equals(this.noInvestment, skillDevelopmentGoal.noInvestment) &&
                Objects.equals(this.noInvestmentReason, skillDevelopmentGoal.noInvestmentReason) &&
                Objects.equals(this.completed, skillDevelopmentGoal.completed) &&
                Objects.equals(this.targetExperienceLevel, skillDevelopmentGoal.targetExperienceLevel) &&
                Objects.equals(this.targetExperienceLevelText, skillDevelopmentGoal.targetExperienceLevelText) &&
                Objects.equals(this.actions, skillDevelopmentGoal.actions) &&
                Objects.equals(this.trainingDays, skillDevelopmentGoal.trainingDays) &&
                Objects.equals(this.projectDays, skillDevelopmentGoal.projectDays) &&
                Objects.equals(this.amount, skillDevelopmentGoal.amount) &&
                Objects.equals(this.until, skillDevelopmentGoal.until) &&
                Objects.equals(this.id, skillDevelopmentGoal.id);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(skill, employee, noInvestment, noInvestmentReason, completed, targetExperienceLevel, targetExperienceLevelText, actions, trainingDays, projectDays, amount, until, id);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SkillDevelopmentGoal {\n");

        sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
        sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
        sb.append("    noInvestment: ").append(toIndentedString(noInvestment)).append("\n");
        sb.append("    noInvestmentReason: ").append(toIndentedString(noInvestmentReason)).append("\n");
        sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
        sb.append("    targetExperienceLevel: ").append(toIndentedString(targetExperienceLevel)).append("\n");
        sb.append("    targetExperienceLevelText: ").append(toIndentedString(targetExperienceLevelText)).append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    trainingDays: ").append(toIndentedString(trainingDays)).append("\n");
        sb.append("    projectDays: ").append(toIndentedString(projectDays)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    until: ").append(toIndentedString(until)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets targetExperienceLevel
     */
    public enum TargetExperienceLevelEnum {
        NUMBER_0(0),
        NUMBER_1(1),
        NUMBER_2(2),
        NUMBER_4(4),
        NUMBER_5(5),
        NUMBER_6(6);

        private Integer value;

        TargetExperienceLevelEnum(Integer value) {
            this.value = value;
        }

        @JsonCreator
        public static TargetExperienceLevelEnum fromValue(String text) {
            for (TargetExperienceLevelEnum b : TargetExperienceLevelEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        @JsonValue
        public Integer getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

    }

}
