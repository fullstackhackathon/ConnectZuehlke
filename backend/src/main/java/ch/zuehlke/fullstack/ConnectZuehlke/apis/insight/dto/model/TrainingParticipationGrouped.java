/*
 * WebApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.zuehlke.fullstack.ConnectZuehlke.apis.insight.dto.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TrainingParticipationGrouped
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-03-21T13:18:19.970506+01:00[Europe/Zurich]")
public class TrainingParticipationGrouped {

    @JsonProperty("Sources")

    private List<TrainingParticipationSource> sources = null;

    @JsonProperty("Rating")

    private Double rating = null;

    @JsonProperty("Description")

    private String description = null;

    @JsonProperty("IsIgnored")

    private Boolean isIgnored = null;

    @JsonProperty("Date")

    private OffsetDateTime date = null;

    @JsonProperty("Year")

    private Integer year = null;

    @JsonProperty("Attachment")

    private Attachment attachment = null;

    @JsonProperty("Training")

    private Training training = null;

    public TrainingParticipationGrouped sources(List<TrainingParticipationSource> sources) {
        this.sources = sources;
        return this;
    }

    public TrainingParticipationGrouped addSourcesItem(TrainingParticipationSource sourcesItem) {
        if (this.sources == null) {
            this.sources = new ArrayList<TrainingParticipationSource>();
        }
        this.sources.add(sourcesItem);
        return this;
    }

    /**
     * Get sources
     *
     * @return sources
     **/
    @Schema(description = "")
    public List<TrainingParticipationSource> getSources() {
        return sources;
    }

    public void setSources(List<TrainingParticipationSource> sources) {
        this.sources = sources;
    }

    public TrainingParticipationGrouped rating(Double rating) {
        this.rating = rating;
        return this;
    }


    /**
     * Get rating
     *
     * @return rating
     **/
    @Schema(description = "")
    public Double getRating() {
        return rating;
    }

    public void setRating(Double rating) {
        this.rating = rating;
    }

    public TrainingParticipationGrouped description(String description) {
        this.description = description;
        return this;
    }


    /**
     * Get description
     *
     * @return description
     **/
    @Schema(description = "")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public TrainingParticipationGrouped isIgnored(Boolean isIgnored) {
        this.isIgnored = isIgnored;
        return this;
    }


    /**
     * Get isIgnored
     *
     * @return isIgnored
     **/
    @Schema(description = "")
    public Boolean isIsIgnored() {
        return isIgnored;
    }

    public void setIsIgnored(Boolean isIgnored) {
        this.isIgnored = isIgnored;
    }

    public TrainingParticipationGrouped date(OffsetDateTime date) {
        this.date = date;
        return this;
    }


    /**
     * Get date
     *
     * @return date
     **/
    @Schema(description = "")
    public OffsetDateTime getDate() {
        return date;
    }

    public void setDate(OffsetDateTime date) {
        this.date = date;
    }

    /**
     * Get year
     *
     * @return year
     **/
    @Schema(description = "")
    public Integer getYear() {
        return year;
    }

    public TrainingParticipationGrouped attachment(Attachment attachment) {
        this.attachment = attachment;
        return this;
    }


    /**
     * Get attachment
     *
     * @return attachment
     **/
    @Schema(description = "")
    public Attachment getAttachment() {
        return attachment;
    }

    public void setAttachment(Attachment attachment) {
        this.attachment = attachment;
    }

    public TrainingParticipationGrouped training(Training training) {
        this.training = training;
        return this;
    }


    /**
     * Get training
     *
     * @return training
     **/
    @Schema(description = "")
    public Training getTraining() {
        return training;
    }

    public void setTraining(Training training) {
        this.training = training;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrainingParticipationGrouped trainingParticipationGrouped = (TrainingParticipationGrouped) o;
        return Objects.equals(this.sources, trainingParticipationGrouped.sources) &&
                Objects.equals(this.rating, trainingParticipationGrouped.rating) &&
                Objects.equals(this.description, trainingParticipationGrouped.description) &&
                Objects.equals(this.isIgnored, trainingParticipationGrouped.isIgnored) &&
                Objects.equals(this.date, trainingParticipationGrouped.date) &&
                Objects.equals(this.year, trainingParticipationGrouped.year) &&
                Objects.equals(this.attachment, trainingParticipationGrouped.attachment) &&
                Objects.equals(this.training, trainingParticipationGrouped.training);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(sources, rating, description, isIgnored, date, year, attachment, training);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TrainingParticipationGrouped {\n");

        sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
        sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    isIgnored: ").append(toIndentedString(isIgnored)).append("\n");
        sb.append("    date: ").append(toIndentedString(date)).append("\n");
        sb.append("    year: ").append(toIndentedString(year)).append("\n");
        sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
        sb.append("    training: ").append(toIndentedString(training)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
